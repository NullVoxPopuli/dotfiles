#!/bin/bash
#
# Runs ember build -e production multiple times on two branches of an app
#
# Arguments:
#  $1 - ssh git repo url
#  $2 - upstream branch
#  $3 - proposed branch
#  $4 - [optional] sub-path to run ember build in
#
# Example:
#
#   ember-build-perf \
#     git@github.com:NullVoxPopuli/limber.git \
#     main \
#     my-perf-improvements \
#     ./frontend/
#
# Ref: `help set`
#   -e  Exit immediately if a command exits with a non-zero status.
#   -E  If set, the ERR trap is inherited by shell functions.
#   -x  print code before executing
set -e

# Alias the args, because $# is hard to keep straight
REPO=$1
UPSTREAM_BRANCH=$2
PROPOSED_BRANCH=$3
APP_PATH=$4
tmpdir=$(mktemp -d -t buildpertestXXXXXXXX)

VARIANT_PROPOSED="proposed"
VARIANT_UPSTREAM="upstream"

# Ensure we aren't confused when things go wrong
function cleanup()
{
  echo "Exiting and cleaning up..."
  cd $PWD
  rm -rf ${tmpdir}
}

function catch() {
  echo "Error ocurred..."

  # echo "Just in case,"
  # usage
  cleanup
}

function usage() {
  echo ""
  echo "Usage:"
  echo ""
  echo "  ember-build-perf git-ssh-url upstream-branch test-branch optional-app-path-in-repo"
  echo ""
  echo "Example:"
  echo ""
  echo "  ember-build-perf \\"
  echo "    git@github.com:NullVoxPopuli/limber.git main perf-improvements frontend/"
  echo ""
  echo "Example:"
  echo ""
  echo "  ember-build-perf \\"
  echo "    git@github.com:NullVoxPopuli/ember-website.git main esbuild-test"
  echo ""
}

trap cleanup SIGINT SIGTERM EXIT
trap catch ERR

function prepare() {
  local variant=$1
  local branch=$2


  echo "Preparing $variant with branch: $branch -- cloning to $tmpdir/$variant"

  mkdir -p $tmpdir
  cd $tmpdir
  git clone $REPO --branch $branch --single-branch --depth 1 --no-tags $variant
  cd "$tmpdir/$variant"

  if [ -f "$tmpdir/$variant/yarn.lock" ]; then
    echo "yarn detected"
    yarn
  fi

  if [ -f "$tmpdir/$variant/package-lock.json" ]; then
    echo "npm detected"
    npm install
  fi
}

# prepare in parallel, because this part isn't what we are measuring
prepare "proposed" $PROPOSED_BRANCH &
prepare "upstream" $UPSTREAM_BRANCH &
wait

function ember_build(){
  # Redirecting output:
  #  https://unix.stackexchange.com/a/563563
  time ember build -e production 1> /dev/null
}

#######################################################
## Need to warm up the build so caches go in to effect
#######################################################
echo "Warming up"

set -Ee

# Intial build
cd "$tmpdir/proposed/$APP_PATH"
ember_build
rm -rf dist

cd "$tmpdir/upstream/$APP_PATH"
ember_build
rm -rf dist

###############################
## Actually begin the test
###############################

echo "Beginning test"

echo "-----"
echo "Proposed branch builds:"
cd "$tmpdir/proposed/$APP_PATH"
ember_build
ember_build
ember_build
ember_build
ember_build

echo "Upstream branch builds:"
cd "$tmpdir/upstream/$APP_PATH"
ember_build
ember_build
ember_build
ember_build
ember_build

echo "-----"

# Cleanup

